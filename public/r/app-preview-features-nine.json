{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "app-preview-features-nine",
  "type": "registry:page",
  "dependencies": [
    "clsx",
    "dotted-map",
    "lucide-react",
    "react",
    "recharts",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:page",
      "target": "app/preview/features/nine/page.tsx",
      "content": "'use client'\nimport { Logo } from '@/components/logo'\nimport { Activity, Map as MapIcon, MessageCircle } from 'lucide-react'\nimport DottedMap from 'dotted-map'\nimport { Area, AreaChart, CartesianGrid } from 'recharts'\nimport { type ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from '@/components/ui/chart'\n\nexport default function FeaturesSection() {\n    return (\n        <section className=\"px-4 py-16 md:py-32\">\n            <div className=\"mx-auto grid max-w-5xl border md:grid-cols-2\">\n                <div>\n                    <div className=\"p-6 sm:p-12\">\n                        <span className=\"text-muted-foreground flex items-center gap-2\">\n                            <MapIcon className=\"size-4\" />\n                            Real time location tracking\n                        </span>\n\n                        <p className=\"mt-8 text-2xl font-semibold\">Advanced tracking system, Instantly locate all your assets.</p>\n                    </div>\n\n                    <div aria-hidden className=\"relative\">\n                        <div className=\"absolute inset-0 z-10 m-auto size-fit\">\n                            <div className=\"rounded-(--radius) bg-background z-1 dark:bg-muted relative flex size-fit w-fit items-center gap-2 border px-3 py-1 text-xs font-medium shadow-md shadow-zinc-950/5\">\n                                <span className=\"text-lg\">ðŸ‡¨ðŸ‡©</span> Last connection from DR Congo\n                            </div>\n                            <div className=\"rounded-(--radius) bg-background absolute inset-2 -bottom-2 mx-auto border px-3 py-4 text-xs font-medium shadow-md shadow-zinc-950/5 dark:bg-zinc-900\"></div>\n                        </div>\n\n                        <div className=\"relative overflow-hidden\">\n                            <div className=\"bg-radial z-1 to-background absolute inset-0 from-transparent to-75%\"></div>\n                            <Map />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"overflow-hidden border-t bg-zinc-50 p-6 sm:p-12 md:border-0 md:border-l dark:bg-transparent\">\n                    <div className=\"relative z-10\">\n                        <span className=\"text-muted-foreground flex items-center gap-2\">\n                            <MessageCircle className=\"size-4\" />\n                            Email and web support\n                        </span>\n\n                        <p className=\"my-8 text-2xl font-semibold\">Reach out via email or web for any assistance you need.</p>\n                    </div>\n                    <div aria-hidden className=\"flex flex-col gap-8\">\n                        <div>\n                            <div className=\"flex items-center gap-2\">\n                                <span className=\"flex size-5 rounded-full border\">\n                                    <Logo className=\"m-auto size-3\" />\n                                </span>\n                                <span className=\"text-muted-foreground text-xs\">Sat 22 Feb</span>\n                            </div>\n                            <div className=\"rounded-(--radius) bg-background mt-1.5 w-3/5 border p-3 text-xs\">Hey, I'm having trouble with my account.</div>\n                        </div>\n\n                        <div>\n                            <div className=\"rounded-(--radius) mb-1 ml-auto w-3/5 bg-blue-600 p-3 text-xs text-white\">Molestiae numquam debitis et ullam distinctio provident nobis repudiandae deleniti necessitatibus.</div>\n                            <span className=\"text-muted-foreground block text-right text-xs\">Now</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-span-full border-y p-12\">\n                    <p className=\"text-center text-4xl font-semibold lg:text-7xl\">99.99% Uptime</p>\n                </div>\n                <div className=\"relative col-span-full\">\n                    <div className=\"absolute z-10 max-w-lg px-6 pr-12 pt-6 md:px-12 md:pt-12\">\n                        <span className=\"text-muted-foreground flex items-center gap-2\">\n                            <Activity className=\"size-4\" />\n                            Activity feed\n                        </span>\n\n                        <p className=\"my-8 text-2xl font-semibold\">\n                            Monitor your application's activity in real-time. <span className=\"text-muted-foreground\"> Instantly identify and resolve issues.</span>\n                        </p>\n                    </div>\n                    <MonitoringChart />\n                </div>\n            </div>\n        </section>\n    )\n}\n\nconst map = new DottedMap({ height: 55, grid: 'diagonal' })\n\nconst points = map.getPoints()\n\nconst svgOptions = {\n    backgroundColor: 'var(--color-background)',\n    color: 'currentColor',\n    radius: 0.15,\n}\n\nconst Map = () => {\n    const viewBox = `0 0 120 60`\n    return (\n        <svg viewBox={viewBox} style={{ background: svgOptions.backgroundColor }}>\n            {points.map((point, index) => (\n                <circle key={index} cx={point.x} cy={point.y} r={svgOptions.radius} fill={svgOptions.color} />\n            ))}\n        </svg>\n    )\n}\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: '#2563eb',\n    },\n    mobile: {\n        label: 'Mobile',\n        color: '#60a5fa',\n    },\n} satisfies ChartConfig\n\nconst chartData = [\n    { month: 'May', desktop: 56, mobile: 224 },\n    { month: 'June', desktop: 56, mobile: 224 },\n    { month: 'January', desktop: 126, mobile: 252 },\n    { month: 'February', desktop: 205, mobile: 410 },\n    { month: 'March', desktop: 200, mobile: 126 },\n    { month: 'April', desktop: 400, mobile: 800 },\n]\n\nconst MonitoringChart = () => {\n    return (\n        <ChartContainer className=\"h-120 aspect-auto md:h-96\" config={chartConfig}>\n            <AreaChart\n                accessibilityLayer\n                data={chartData}\n                margin={{\n                    left: 0,\n                    right: 0,\n                }}>\n                <defs>\n                    <linearGradient id=\"fillDesktop\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"var(--color-desktop)\" stopOpacity={0.8} />\n                        <stop offset=\"55%\" stopColor=\"var(--color-desktop)\" stopOpacity={0.1} />\n                    </linearGradient>\n                    <linearGradient id=\"fillMobile\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"var(--color-mobile)\" stopOpacity={0.8} />\n                        <stop offset=\"55%\" stopColor=\"var(--color-mobile)\" stopOpacity={0.1} />\n                    </linearGradient>\n                </defs>\n                <CartesianGrid vertical={false} />\n                <ChartTooltip active cursor={false} content={<ChartTooltipContent className=\"dark:bg-muted\" />} />\n                <Area strokeWidth={2} dataKey=\"mobile\" type=\"stepBefore\" fill=\"url(#fillMobile)\" fillOpacity={0.1} stroke=\"var(--color-mobile)\" stackId=\"a\" />\n                <Area strokeWidth={2} dataKey=\"desktop\" type=\"stepBefore\" fill=\"url(#fillDesktop)\" fillOpacity={0.1} stroke=\"var(--color-desktop)\" stackId=\"a\" />\n            </AreaChart>\n        </ChartContainer>\n    )\n}\n",
      "path": "app/preview/features/nine/page.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/logo.tsx",
      "content": "import { cn } from '@/lib/utils'\n\nexport const Logo = ({ className }: { className?: string }) => {\n    return (\n        <svg className={cn('size-7 w-7', className)} viewBox=\"0 0 71 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n                d=\"M61.25 1.625L70.75 1.5625C70.75 4.77083 70.25 7.79167 69.25 10.625C68.2917 13.4583 66.8958 15.9583 65.0625 18.125C63.2708 20.25 61.125 21.9375 58.625 23.1875C56.1667 24.3958 53.4583 25 50.5 25C46.875 25 43.6667 24.2708 40.875 22.8125C38.125 21.3542 35.125 19.2083 31.875 16.375C29.75 14.4167 27.7917 12.8958 26 11.8125C24.2083 10.7292 22.2708 10.1875 20.1875 10.1875C18.0625 10.1875 16.25 10.7083 14.75 11.75C13.25 12.75 12.0833 14.1875 11.25 16.0625C10.4583 17.9375 10.0625 20.1875 10.0625 22.8125L0 22.9375C0 19.6875 0.479167 16.6667 1.4375 13.875C2.4375 11.0833 3.83333 8.64583 5.625 6.5625C7.41667 4.47917 9.54167 2.875 12 1.75C14.5 0.583333 17.2292 0 20.1875 0C23.8542 0 27.1042 0.770833 29.9375 2.3125C32.8125 3.85417 35.7708 5.97917 38.8125 8.6875C41.1042 10.7708 43.1042 12.3333 44.8125 13.375C46.5625 14.375 48.4583 14.875 50.5 14.875C52.6667 14.875 54.5417 14.3125 56.125 13.1875C57.75 12.0625 59 10.5 59.875 8.5C60.7917 6.5 61.25 4.20833 61.25 1.625Z\"\n                fill=\"currentColor\"\n            />\n        </svg>\n    )\n}\n\nexport const LogoStroke = ({ className }: { className?: string }) => {\n    return (\n        <svg className={cn('size-7 w-7', className)} viewBox=\"0 0 71 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n                d=\"M61.25 1.625L70.75 1.5625C70.75 4.77083 70.25 7.79167 69.25 10.625C68.2917 13.4583 66.8958 15.9583 65.0625 18.125C63.2708 20.25 61.125 21.9375 58.625 23.1875C56.1667 24.3958 53.4583 25 50.5 25C46.875 25 43.6667 24.2708 40.875 22.8125C38.125 21.3542 35.125 19.2083 31.875 16.375C29.75 14.4167 27.7917 12.8958 26 11.8125C24.2083 10.7292 22.2708 10.1875 20.1875 10.1875C18.0625 10.1875 16.25 10.7083 14.75 11.75C13.25 12.75 12.0833 14.1875 11.25 16.0625C10.4583 17.9375 10.0625 20.1875 10.0625 22.8125L0 22.9375C0 19.6875 0.479167 16.6667 1.4375 13.875C2.4375 11.0833 3.83333 8.64583 5.625 6.5625C7.41667 4.47917 9.54167 2.875 12 1.75C14.5 0.583333 17.2292 0 20.1875 0C23.8542 0 27.1042 0.770833 29.9375 2.3125C32.8125 3.85417 35.7708 5.97917 38.8125 8.6875C41.1042 10.7708 43.1042 12.3333 44.8125 13.375C46.5625 14.375 48.4583 14.875 50.5 14.875C52.6667 14.875 54.5417 14.3125 56.125 13.1875C57.75 12.0625 59 10.5 59.875 8.5C60.7917 6.5 61.25 4.20833 61.25 1.625Z\"\n                fill=\"none\"\n                strokeWidth={0.5}\n                stroke=\"currentColor\"\n            />\n        </svg>\n    )\n}\n",
      "path": "components/logo.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport const titleToNumber = (title: string): number => {\n    const titles = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n    return titles.indexOf(title.toLowerCase()) + 1;\n};",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/chart.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"]\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<\"div\"> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: \"line\" | \"dot\" | \"dashed\"\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    <div\n      className={cn(\n        \"border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl\",\n        className\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                indicator === \"dot\" && \"items-center\"\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                          {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                              indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          }\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none\",\n                      nestLabel ? \"items-end\" : \"items-center\"\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\"\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
      "path": "components/ui/chart.tsx"
    }
  ]
}
