{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "app-preview-hero-section-three",
  "type": "registry:page",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "motion",
    "next",
    "react",
    "react-use-measure",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:page",
      "target": "app/preview/hero-section/three/page.tsx",
      "content": "import React from 'react'\nimport { Mail, SendHorizonal } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { TextEffect } from '@/components/motion-primitives/text-effect'\nimport { AnimatedGroup } from '@/components/motion-primitives/animated-group'\nimport { HeroHeader } from '@/components/hero5-header'\nimport { LogoCloud } from '@/components/logo-cloud'\nimport Image from 'next/image'\n\nconst transitionVariants = {\n    item: {\n        hidden: {\n            opacity: 0,\n            filter: 'blur(12px)',\n            y: 12,\n        },\n        visible: {\n            opacity: 1,\n            filter: 'blur(0px)',\n            y: 0,\n            transition: {\n                type: 'spring',\n                bounce: 0.3,\n                duration: 1.5,\n            },\n        },\n    },\n}\n\nexport default function HeroSection() {\n    return (\n        <>\n            <HeroHeader />\n\n            <main className=\"overflow-hidden\">\n                <div\n                    aria-hidden\n                    className=\"absolute inset-0 isolate z-10 hidden opacity-65 contain-strict lg:block\">\n                    <div className=\"w-140 h-320 -translate-y-87.5 absolute left-0 top-0 -rotate-45 rounded-full bg-[radial-gradient(68.54%_68.72%_at_55.02%_31.46%,hsla(0,0%,85%,.08)_0,hsla(0,0%,55%,.02)_50%,hsla(0,0%,45%,0)_80%)]\" />\n                    <div className=\"h-320 absolute left-0 top-0 w-60 -rotate-45 rounded-full bg-[radial-gradient(50%_50%_at_50%_50%,hsla(0,0%,85%,.06)_0,hsla(0,0%,45%,.02)_80%,transparent_100%)] [translate:5%_-50%]\" />\n                    <div className=\"h-320 -translate-y-87.5 absolute left-0 top-0 w-60 -rotate-45 bg-[radial-gradient(50%_50%_at_50%_50%,hsla(0,0%,85%,.04)_0,hsla(0,0%,45%,.02)_80%,transparent_100%)]\" />\n                </div>\n                <section>\n                    <div className=\"relative mx-auto max-w-6xl px-6 pt-32 lg:pb-16 lg:pt-48\">\n                        <div className=\"relative z-10 mx-auto max-w-4xl text-center\">\n                            <TextEffect\n                                preset=\"fade-in-blur\"\n                                speedSegment={0.3}\n                                as=\"h1\"\n                                className=\"text-balance text-4xl font-medium sm:text-5xl md:text-6xl\">\n                                Your gateway to endless entertainment experiences\n                            </TextEffect>\n                            <TextEffect\n                                per=\"line\"\n                                preset=\"fade-in-blur\"\n                                speedSegment={0.3}\n                                delay={0.5}\n                                as=\"p\"\n                                className=\"mx-auto mt-12 max-w-2xl text-pretty text-lg\">\n                                Tailwindcss highly customizable components for building modern websites and applications that look and feel the way you mean it.\n                            </TextEffect>\n\n                            <AnimatedGroup\n                                variants={{\n                                    container: {\n                                        visible: {\n                                            transition: {\n                                                staggerChildren: 0.05,\n                                                delayChildren: 0.75,\n                                            },\n                                        },\n                                    },\n                                    ...transitionVariants,\n                                }}\n                                className=\"mt-12\">\n                                <form\n                                    action=\"\"\n                                    className=\"mx-auto max-w-sm\">\n                                    <div className=\"bg-background has-[input:focus]:ring-muted relative grid grid-cols-[1fr_auto] items-center rounded-[calc(var(--radius)+0.5rem)] border pr-2 shadow shadow-zinc-950/5 has-[input:focus]:ring-2\">\n                                        <Mail className=\"pointer-events-none absolute inset-y-0 left-4 my-auto size-4\" />\n\n                                        <input\n                                            placeholder=\"Your mail address\"\n                                            className=\"h-12 w-full bg-transparent pl-12 focus:outline-none\"\n                                            type=\"email\"\n                                        />\n\n                                        <div className=\"md:pr-1.5 lg:pr-0\">\n                                            <Button\n                                                aria-label=\"submit\"\n                                                size=\"sm\"\n                                                className=\"rounded-(--radius)\">\n                                                <span className=\"hidden md:block\">Get Started</span>\n                                                <SendHorizonal\n                                                    className=\"relative mx-auto size-5 md:hidden\"\n                                                    strokeWidth={2}\n                                                />\n                                            </Button>\n                                        </div>\n                                    </div>\n                                </form>\n                            </AnimatedGroup>\n                        </div>\n                        <div className=\"mx-auto md:-mt-20 lg:-mt-40\">\n                            <AnimatedGroup\n                                variants={{\n                                    container: {\n                                        visible: {\n                                            transition: {\n                                                staggerChildren: 0.05,\n                                                delayChildren: 0.75,\n                                            },\n                                        },\n                                    },\n                                    ...transitionVariants,\n                                }}>\n                                <div className=\"-rotate-30 aspect-3/2 relative mx-auto lg:w-2/3\">\n                                    <div className=\"bg-linear-to-b to-background from-background absolute inset-0 via-transparent\"></div>\n                                    <div className=\"bg-linear-to-l to-background from-background absolute inset-0 via-transparent\"></div>\n                                    <Image\n                                        src=\"https://res.cloudinary.com/dg4jhba5c/image/upload/v1741605545/phone-backgroudn_xqgg5g.jpg\"\n                                        alt=\"Phone Background\"\n                                        width=\"6240\"\n                                        height=\"4160\"\n                                    />\n                                </div>\n                            </AnimatedGroup>\n                        </div>\n                    </div>\n                </section>\n                <LogoCloud />\n            </main>\n        </>\n    )\n}\n",
      "path": "app/preview/hero-section/three/page.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/hero5-header.tsx",
      "content": "'use client'\nimport Link from 'next/link'\nimport { Logo } from '@/components/logo'\nimport { Menu, X } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport React from 'react'\nimport { cn } from '@/lib/utils'\n\nconst menuItems = [\n    { name: 'Features', href: '#link' },\n    { name: 'Solution', href: '#link' },\n    { name: 'Pricing', href: '#link' },\n    { name: 'About', href: '#link' },\n]\n\nexport const HeroHeader = () => {\n    const [menuState, setMenuState] = React.useState(false)\n    const [isScrolled, setIsScrolled] = React.useState(false)\n\n    React.useEffect(() => {\n        const handleScroll = () => {\n            setIsScrolled(window.scrollY > 50)\n        }\n        window.addEventListener('scroll', handleScroll)\n        return () => window.removeEventListener('scroll', handleScroll)\n    }, [])\n    return (\n        <header>\n            <nav\n                data-state={menuState && 'active'}\n                className=\"fixed z-20 w-full px-2\">\n                <div className={cn('mx-auto mt-2 max-w-6xl px-6 transition-all duration-300 lg:px-12', isScrolled && 'bg-background/50 max-w-4xl rounded-2xl border backdrop-blur-lg lg:px-5')}>\n                    <div className=\"relative flex flex-wrap items-center justify-between gap-6 py-3 lg:gap-0 lg:py-4\">\n                        <div className=\"flex w-full justify-between lg:w-auto\">\n                            <Link\n                                href=\"/\"\n                                aria-label=\"home\"\n                                className=\"flex items-center space-x-2\">\n                                <Logo />\n                            </Link>\n\n                            <button\n                                onClick={() => setMenuState(!menuState)}\n                                aria-label={menuState == true ? 'Close Menu' : 'Open Menu'}\n                                className=\"relative z-20 -m-2.5 -mr-4 block cursor-pointer p-2.5 lg:hidden\">\n                                <Menu className=\"in-data-[state=active]:rotate-180 in-data-[state=active]:scale-0 in-data-[state=active]:opacity-0 m-auto size-6 duration-200\" />\n                                <X className=\"in-data-[state=active]:rotate-0 in-data-[state=active]:scale-100 in-data-[state=active]:opacity-100 absolute inset-0 m-auto size-6 -rotate-180 scale-0 opacity-0 duration-200\" />\n                            </button>\n                        </div>\n\n                        <div className=\"absolute inset-0 m-auto hidden size-fit lg:block\">\n                            <ul className=\"flex gap-8 text-sm\">\n                                {menuItems.map((item, index) => (\n                                    <li key={index}>\n                                        <Link\n                                            href={item.href}\n                                            className=\"text-muted-foreground hover:text-accent-foreground block duration-150\">\n                                            <span>{item.name}</span>\n                                        </Link>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n\n                        <div className=\"bg-background in-data-[state=active]:block lg:in-data-[state=active]:flex mb-6 hidden w-full flex-wrap items-center justify-end space-y-8 rounded-3xl border p-6 shadow-2xl shadow-zinc-300/20 md:flex-nowrap lg:m-0 lg:flex lg:w-fit lg:gap-6 lg:space-y-0 lg:border-transparent lg:bg-transparent lg:p-0 lg:shadow-none dark:shadow-none dark:lg:bg-transparent\">\n                            <div className=\"lg:hidden\">\n                                <ul className=\"space-y-6 text-base\">\n                                    {menuItems.map((item, index) => (\n                                        <li key={index}>\n                                            <Link\n                                                href={item.href}\n                                                className=\"text-muted-foreground hover:text-accent-foreground block duration-150\">\n                                                <span>{item.name}</span>\n                                            </Link>\n                                        </li>\n                                    ))}\n                                </ul>\n                            </div>\n                            <div className=\"flex w-full flex-col space-y-3 sm:flex-row sm:gap-3 sm:space-y-0 md:w-fit\">\n                                <Button\n                                    asChild\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className={cn(isScrolled && 'lg:hidden')}>\n                                    <Link href=\"#\">\n                                        <span>Login</span>\n                                    </Link>\n                                </Button>\n                                <Button\n                                    asChild\n                                    size=\"sm\"\n                                    className={cn(isScrolled && 'lg:hidden')}>\n                                    <Link href=\"#\">\n                                        <span>Sign Up</span>\n                                    </Link>\n                                </Button>\n                                <Button\n                                    asChild\n                                    size=\"sm\"\n                                    className={cn(isScrolled ? 'lg:inline-flex' : 'hidden')}>\n                                    <Link href=\"#\">\n                                        <span>Get Started</span>\n                                    </Link>\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        </header>\n    )\n}\n",
      "path": "components/hero5-header.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/logo-cloud.tsx",
      "content": "import { InfiniteSlider } from '@/components/motion-primitives/infinite-slider'\nimport { ProgressiveBlur } from '@/components/motion-primitives/progressive-blur'\n\nexport const LogoCloud = () => {\n    return (\n        <section className=\"bg-background pb-16 md:pb-32\">\n            <div className=\"group relative m-auto max-w-6xl px-6\">\n                <div className=\"flex flex-col items-center md:flex-row\">\n                    <div className=\"inline md:max-w-44 md:border-r md:pr-6\">\n                        <p className=\"text-end text-sm\">Powering the best teams</p>\n                    </div>\n                    <div className=\"relative py-6 md:w-[calc(100%-11rem)]\">\n                        <InfiniteSlider\n                            speedOnHover={20}\n                            speed={40}\n                            gap={112}>\n                            <div className=\"flex\">\n                                <img\n                                    className=\"mx-auto h-5 w-fit dark:invert\"\n                                    src=\"https://html.tailus.io/blocks/customers/nvidia.svg\"\n                                    alt=\"Nvidia Logo\"\n                                    height=\"20\"\n                                    width=\"auto\"\n                                />\n                            </div>\n\n                            <div className=\"flex\">\n                                <img\n                                    className=\"mx-auto h-4 w-fit dark:invert\"\n                                    src=\"https://html.tailus.io/blocks/customers/column.svg\"\n                                    alt=\"Column Logo\"\n                                    height=\"16\"\n                                    width=\"auto\"\n                                />\n                            </div>\n                            <div className=\"flex\">\n                                <img\n                                    className=\"mx-auto h-4 w-fit dark:invert\"\n                                    src=\"https://html.tailus.io/blocks/customers/github.svg\"\n                                    alt=\"GitHub Logo\"\n                                    height=\"16\"\n                                    width=\"auto\"\n                                />\n                            </div>\n                            <div className=\"flex\">\n                                <img\n                                    className=\"mx-auto h-5 w-fit dark:invert\"\n                                    src=\"https://html.tailus.io/blocks/customers/nike.svg\"\n                                    alt=\"Nike Logo\"\n                                    height=\"20\"\n                                    width=\"auto\"\n                                />\n                            </div>\n                            <div className=\"flex\">\n                                <img\n                                    className=\"mx-auto h-5 w-fit dark:invert\"\n                                    src=\"https://html.tailus.io/blocks/customers/lemonsqueezy.svg\"\n                                    alt=\"Lemon Squeezy Logo\"\n                                    height=\"20\"\n                                    width=\"auto\"\n                                />\n                            </div>\n                            <div className=\"flex\">\n                                <img\n                                    className=\"mx-auto h-4 w-fit dark:invert\"\n                                    src=\"https://html.tailus.io/blocks/customers/laravel.svg\"\n                                    alt=\"Laravel Logo\"\n                                    height=\"16\"\n                                    width=\"auto\"\n                                />\n                            </div>\n                            <div className=\"flex\">\n                                <img\n                                    className=\"mx-auto h-7 w-fit dark:invert\"\n                                    src=\"https://html.tailus.io/blocks/customers/lilly.svg\"\n                                    alt=\"Lilly Logo\"\n                                    height=\"28\"\n                                    width=\"auto\"\n                                />\n                            </div>\n\n                            <div className=\"flex\">\n                                <img\n                                    className=\"mx-auto h-6 w-fit dark:invert\"\n                                    src=\"https://html.tailus.io/blocks/customers/openai.svg\"\n                                    alt=\"OpenAI Logo\"\n                                    height=\"24\"\n                                    width=\"auto\"\n                                />\n                            </div>\n                        </InfiniteSlider>\n\n                        <div className=\"bg-linear-to-r from-background absolute inset-y-0 left-0 w-20\"></div>\n                        <div className=\"bg-linear-to-l from-background absolute inset-y-0 right-0 w-20\"></div>\n                        <ProgressiveBlur\n                            className=\"pointer-events-none absolute left-0 top-0 h-full w-20\"\n                            direction=\"left\"\n                            blurIntensity={1}\n                        />\n                        <ProgressiveBlur\n                            className=\"pointer-events-none absolute right-0 top-0 h-full w-20\"\n                            direction=\"right\"\n                            blurIntensity={1}\n                        />\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}\n",
      "path": "components/logo-cloud.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/logo.tsx",
      "content": "import { cn } from '@/lib/utils'\n\nexport const Logo = ({ className }: { className?: string }) => {\n    return (\n        <svg className={cn('size-7 w-7', className)} viewBox=\"0 0 71 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n                d=\"M61.25 1.625L70.75 1.5625C70.75 4.77083 70.25 7.79167 69.25 10.625C68.2917 13.4583 66.8958 15.9583 65.0625 18.125C63.2708 20.25 61.125 21.9375 58.625 23.1875C56.1667 24.3958 53.4583 25 50.5 25C46.875 25 43.6667 24.2708 40.875 22.8125C38.125 21.3542 35.125 19.2083 31.875 16.375C29.75 14.4167 27.7917 12.8958 26 11.8125C24.2083 10.7292 22.2708 10.1875 20.1875 10.1875C18.0625 10.1875 16.25 10.7083 14.75 11.75C13.25 12.75 12.0833 14.1875 11.25 16.0625C10.4583 17.9375 10.0625 20.1875 10.0625 22.8125L0 22.9375C0 19.6875 0.479167 16.6667 1.4375 13.875C2.4375 11.0833 3.83333 8.64583 5.625 6.5625C7.41667 4.47917 9.54167 2.875 12 1.75C14.5 0.583333 17.2292 0 20.1875 0C23.8542 0 27.1042 0.770833 29.9375 2.3125C32.8125 3.85417 35.7708 5.97917 38.8125 8.6875C41.1042 10.7708 43.1042 12.3333 44.8125 13.375C46.5625 14.375 48.4583 14.875 50.5 14.875C52.6667 14.875 54.5417 14.3125 56.125 13.1875C57.75 12.0625 59 10.5 59.875 8.5C60.7917 6.5 61.25 4.20833 61.25 1.625Z\"\n                fill=\"currentColor\"\n            />\n        </svg>\n    )\n}\n\nexport const LogoStroke = ({ className }: { className?: string }) => {\n    return (\n        <svg className={cn('size-7 w-7', className)} viewBox=\"0 0 71 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n                d=\"M61.25 1.625L70.75 1.5625C70.75 4.77083 70.25 7.79167 69.25 10.625C68.2917 13.4583 66.8958 15.9583 65.0625 18.125C63.2708 20.25 61.125 21.9375 58.625 23.1875C56.1667 24.3958 53.4583 25 50.5 25C46.875 25 43.6667 24.2708 40.875 22.8125C38.125 21.3542 35.125 19.2083 31.875 16.375C29.75 14.4167 27.7917 12.8958 26 11.8125C24.2083 10.7292 22.2708 10.1875 20.1875 10.1875C18.0625 10.1875 16.25 10.7083 14.75 11.75C13.25 12.75 12.0833 14.1875 11.25 16.0625C10.4583 17.9375 10.0625 20.1875 10.0625 22.8125L0 22.9375C0 19.6875 0.479167 16.6667 1.4375 13.875C2.4375 11.0833 3.83333 8.64583 5.625 6.5625C7.41667 4.47917 9.54167 2.875 12 1.75C14.5 0.583333 17.2292 0 20.1875 0C23.8542 0 27.1042 0.770833 29.9375 2.3125C32.8125 3.85417 35.7708 5.97917 38.8125 8.6875C41.1042 10.7708 43.1042 12.3333 44.8125 13.375C46.5625 14.375 48.4583 14.875 50.5 14.875C52.6667 14.875 54.5417 14.3125 56.125 13.1875C57.75 12.0625 59 10.5 59.875 8.5C60.7917 6.5 61.25 4.20833 61.25 1.625Z\"\n                fill=\"none\"\n                strokeWidth={0.5}\n                stroke=\"currentColor\"\n            />\n        </svg>\n    )\n}\n",
      "path": "components/logo.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/motion-primitives/animated-group.tsx",
      "content": "'use client'\nimport { ReactNode } from 'react'\nimport { motion, Variants } from 'motion/react'\nimport React from 'react'\n\nexport type PresetType = 'fade' | 'slide' | 'scale' | 'blur' | 'blur-slide' | 'zoom' | 'flip' | 'bounce' | 'rotate' | 'swing'\n\nexport type AnimatedGroupProps = {\n    children: ReactNode\n    className?: string\n    variants?: {\n        container?: Variants\n        item?: Variants\n    }\n    preset?: PresetType\n    as?: React.ElementType\n    asChild?: React.ElementType\n}\n\nconst defaultContainerVariants: Variants = {\n    visible: {\n        transition: {\n            staggerChildren: 0.1,\n        },\n    },\n}\n\nconst defaultItemVariants: Variants = {\n    hidden: { opacity: 0 },\n    visible: { opacity: 1 },\n}\n\nconst presetVariants: Record<PresetType, Variants> = {\n    fade: {},\n    slide: {\n        hidden: { y: 20 },\n        visible: { y: 0 },\n    },\n    scale: {\n        hidden: { scale: 0.8 },\n        visible: { scale: 1 },\n    },\n    blur: {\n        hidden: { filter: 'blur(4px)' },\n        visible: { filter: 'blur(0px)' },\n    },\n    'blur-slide': {\n        hidden: { filter: 'blur(4px)', y: 20 },\n        visible: { filter: 'blur(0px)', y: 0 },\n    },\n    zoom: {\n        hidden: { scale: 0.5 },\n        visible: {\n            scale: 1,\n            transition: { type: 'spring', stiffness: 300, damping: 20 },\n        },\n    },\n    flip: {\n        hidden: { rotateX: -90 },\n        visible: {\n            rotateX: 0,\n            transition: { type: 'spring', stiffness: 300, damping: 20 },\n        },\n    },\n    bounce: {\n        hidden: { y: -50 },\n        visible: {\n            y: 0,\n            transition: { type: 'spring', stiffness: 400, damping: 10 },\n        },\n    },\n    rotate: {\n        hidden: { rotate: -180 },\n        visible: {\n            rotate: 0,\n            transition: { type: 'spring', stiffness: 200, damping: 15 },\n        },\n    },\n    swing: {\n        hidden: { rotate: -10 },\n        visible: {\n            rotate: 0,\n            transition: { type: 'spring', stiffness: 300, damping: 8 },\n        },\n    },\n}\n\nconst addDefaultVariants = (variants: Variants) => ({\n    hidden: { ...defaultItemVariants.hidden, ...variants.hidden },\n    visible: { ...defaultItemVariants.visible, ...variants.visible },\n})\n\nfunction AnimatedGroup({ children, className, variants, preset, as = 'div', asChild = 'div' }: AnimatedGroupProps) {\n    const selectedVariants = {\n        item: addDefaultVariants(preset ? presetVariants[preset] : {}),\n        container: addDefaultVariants(defaultContainerVariants),\n    }\n    const containerVariants = variants?.container || selectedVariants.container\n    const itemVariants = variants?.item || selectedVariants.item\n\n    const MotionComponent = motion(as)\n\n    const MotionChild = motion(asChild)\n\n    return (\n        <MotionComponent\n            initial=\"hidden\"\n            animate=\"visible\"\n            variants={containerVariants}\n            className={className}>\n            {React.Children.map(children, (child, index) => (\n                <MotionChild\n                    key={index}\n                    variants={itemVariants}>\n                    {child}\n                </MotionChild>\n            ))}\n        </MotionComponent>\n    )\n}\n\nexport { AnimatedGroup }\n",
      "path": "components/motion-primitives/animated-group.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/motion-primitives/infinite-slider.tsx",
      "content": "'use client';\nimport { cn } from '@/lib/utils';\nimport { useMotionValue, animate, motion } from 'motion/react';\nimport { useState, useEffect } from 'react';\nimport useMeasure from 'react-use-measure';\n\nexport type InfiniteSliderProps = {\n  children: React.ReactNode;\n  gap?: number;\n  speed?: number;\n  speedOnHover?: number;\n  direction?: 'horizontal' | 'vertical';\n  reverse?: boolean;\n  className?: string;\n};\n\nexport function InfiniteSlider({\n  children,\n  gap = 16,\n  speed = 100,\n  speedOnHover,\n  direction = 'horizontal',\n  reverse = false,\n  className,\n}: InfiniteSliderProps) {\n  const [currentSpeed, setCurrentSpeed] = useState(speed);\n  const [ref, { width, height }] = useMeasure();\n  const translation = useMotionValue(0);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [key, setKey] = useState(0);\n\n  useEffect(() => {\n    let controls;\n    const size = direction === 'horizontal' ? width : height;\n    const contentSize = size + gap;\n    const from = reverse ? -contentSize / 2 : 0;\n    const to = reverse ? 0 : -contentSize / 2;\n\n    const distanceToTravel = Math.abs(to - from);\n    const duration = distanceToTravel / currentSpeed;\n\n    if (isTransitioning) {\n      const remainingDistance = Math.abs(translation.get() - to);\n      const transitionDuration = remainingDistance / currentSpeed;\n\n      controls = animate(translation, [translation.get(), to], {\n        ease: 'linear',\n        duration: transitionDuration,\n        onComplete: () => {\n          setIsTransitioning(false);\n          setKey((prevKey) => prevKey + 1);\n        },\n      });\n    } else {\n      controls = animate(translation, [from, to], {\n        ease: 'linear',\n        duration: duration,\n        repeat: Infinity,\n        repeatType: 'loop',\n        repeatDelay: 0,\n        onRepeat: () => {\n          translation.set(from);\n        },\n      });\n    }\n\n    return controls?.stop;\n  }, [\n    key,\n    translation,\n    currentSpeed,\n    width,\n    height,\n    gap,\n    isTransitioning,\n    direction,\n    reverse,\n  ]);\n\n  const hoverProps = speedOnHover\n    ? {\n        onHoverStart: () => {\n          setIsTransitioning(true);\n          setCurrentSpeed(speedOnHover);\n        },\n        onHoverEnd: () => {\n          setIsTransitioning(true);\n          setCurrentSpeed(speed);\n        },\n      }\n    : {};\n\n  return (\n    <div className={cn('overflow-hidden', className)}>\n      <motion.div\n        className='flex w-max'\n        style={{\n          ...(direction === 'horizontal'\n            ? { x: translation }\n            : { y: translation }),\n          gap: `${gap}px`,\n          flexDirection: direction === 'horizontal' ? 'row' : 'column',\n        }}\n        ref={ref}\n        {...hoverProps}\n      >\n        {children}\n        {children}\n      </motion.div>\n    </div>\n  );\n}\n",
      "path": "components/motion-primitives/infinite-slider.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/motion-primitives/progressive-blur.tsx",
      "content": "'use client';\nimport { cn } from '@/lib/utils';\nimport { HTMLMotionProps, motion } from 'motion/react';\n\nexport const GRADIENT_ANGLES = {\n  top: 0,\n  right: 90,\n  bottom: 180,\n  left: 270,\n};\n\nexport type ProgressiveBlurProps = {\n  direction?: keyof typeof GRADIENT_ANGLES;\n  blurLayers?: number;\n  className?: string;\n  blurIntensity?: number;\n} & HTMLMotionProps<'div'>;\n\nexport function ProgressiveBlur({\n  direction = 'bottom',\n  blurLayers = 8,\n  className,\n  blurIntensity = 0.25,\n  ...props\n}: ProgressiveBlurProps) {\n  const layers = Math.max(blurLayers, 2);\n  const segmentSize = 1 / (blurLayers + 1);\n\n  return (\n    <div className={cn('relative', className)}>\n      {Array.from({ length: layers }).map((_, index) => {\n        const angle = GRADIENT_ANGLES[direction];\n        const gradientStops = [\n          index * segmentSize,\n          (index + 1) * segmentSize,\n          (index + 2) * segmentSize,\n          (index + 3) * segmentSize,\n        ].map(\n          (pos, posIndex) =>\n            `rgba(255, 255, 255, ${posIndex === 1 || posIndex === 2 ? 1 : 0}) ${pos * 100}%`\n        );\n\n        const gradient = `linear-gradient(${angle}deg, ${gradientStops.join(\n          ', '\n        )})`;\n\n        return (\n          <motion.div\n            key={index}\n            className='pointer-events-none absolute inset-0 rounded-[inherit]'\n            style={{\n              maskImage: gradient,\n              WebkitMaskImage: gradient,\n              backdropFilter: `blur(${index * blurIntensity}px)`,\n            }}\n            {...props}\n          />\n        );\n      })}\n    </div>\n  );\n}\n",
      "path": "components/motion-primitives/progressive-blur.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/motion-primitives/text-effect.tsx",
      "content": "'use client'\nimport { cn } from '@/lib/utils'\nimport { AnimatePresence, motion, TargetAndTransition, Transition, Variant, Variants } from 'motion/react'\nimport React from 'react'\n\nexport type PresetType = 'blur' | 'fade-in-blur' | 'scale' | 'fade' | 'slide'\n\nexport type PerType = 'word' | 'char' | 'line'\n\nexport type TextEffectProps = {\n    children: string\n    per?: PerType\n    as?: keyof React.JSX.IntrinsicElements\n    variants?: {\n        container?: Variants\n        item?: Variants\n    }\n    className?: string\n    preset?: PresetType\n    delay?: number\n    speedReveal?: number\n    speedSegment?: number\n    trigger?: boolean\n    onAnimationComplete?: () => void\n    onAnimationStart?: () => void\n    segmentWrapperClassName?: string\n    containerTransition?: Transition\n    segmentTransition?: Transition\n    style?: React.CSSProperties\n}\n\nconst defaultStaggerTimes: Record<PerType, number> = {\n    char: 0.03,\n    word: 0.05,\n    line: 0.1,\n}\n\nconst defaultContainerVariants: Variants = {\n    hidden: { opacity: 0 },\n    visible: {\n        opacity: 1,\n        transition: {\n            staggerChildren: 0.05,\n        },\n    },\n    exit: {\n        transition: { staggerChildren: 0.05, staggerDirection: -1 },\n    },\n}\n\nconst defaultItemVariants: Variants = {\n    hidden: { opacity: 0 },\n    visible: {\n        opacity: 1,\n    },\n    exit: { opacity: 0 },\n}\n\nconst presetVariants: Record<PresetType, { container: Variants; item: Variants }> = {\n    blur: {\n        container: defaultContainerVariants,\n        item: {\n            hidden: { opacity: 0, filter: 'blur(12px)' },\n            visible: { opacity: 1, filter: 'blur(0px)' },\n            exit: { opacity: 0, filter: 'blur(12px)' },\n        },\n    },\n    'fade-in-blur': {\n        container: defaultContainerVariants,\n        item: {\n            hidden: { opacity: 0, y: 20, filter: 'blur(12px)' },\n            visible: { opacity: 1, y: 0, filter: 'blur(0px)' },\n            exit: { opacity: 0, y: 20, filter: 'blur(12px)' },\n        },\n    },\n    scale: {\n        container: defaultContainerVariants,\n        item: {\n            hidden: { opacity: 0, scale: 0 },\n            visible: { opacity: 1, scale: 1 },\n            exit: { opacity: 0, scale: 0 },\n        },\n    },\n    fade: {\n        container: defaultContainerVariants,\n        item: {\n            hidden: { opacity: 0 },\n            visible: { opacity: 1 },\n            exit: { opacity: 0 },\n        },\n    },\n    slide: {\n        container: defaultContainerVariants,\n        item: {\n            hidden: { opacity: 0, y: 20 },\n            visible: { opacity: 1, y: 0 },\n            exit: { opacity: 0, y: 20 },\n        },\n    },\n}\n\nconst AnimationComponent: React.FC<{\n    segment: string\n    variants: Variants\n    per: 'line' | 'word' | 'char'\n    segmentWrapperClassName?: string\n}> = React.memo(({ segment, variants, per, segmentWrapperClassName }) => {\n    const content =\n        per === 'line' ? (\n            <motion.span\n                variants={variants}\n                className=\"block\">\n                {segment}\n            </motion.span>\n        ) : per === 'word' ? (\n            <motion.span\n                aria-hidden=\"true\"\n                variants={variants}\n                className=\"inline-block whitespace-pre\">\n                {segment}\n            </motion.span>\n        ) : (\n            <motion.span className=\"inline-block whitespace-pre\">\n                {segment.split('').map((char, charIndex) => (\n                    <motion.span\n                        key={`char-${charIndex}`}\n                        aria-hidden=\"true\"\n                        variants={variants}\n                        className=\"inline-block whitespace-pre\">\n                        {char}\n                    </motion.span>\n                ))}\n            </motion.span>\n        )\n\n    if (!segmentWrapperClassName) {\n        return content\n    }\n\n    const defaultWrapperClassName = per === 'line' ? 'block' : 'inline-block'\n\n    return <span className={cn(defaultWrapperClassName, segmentWrapperClassName)}>{content}</span>\n})\n\nAnimationComponent.displayName = 'AnimationComponent'\n\nconst splitText = (text: string, per: 'line' | 'word' | 'char') => {\n    if (per === 'line') return text.split('\\n')\n    return text.split(/(\\s+)/)\n}\n\nconst hasTransition = (variant: Variant): variant is TargetAndTransition & { transition?: Transition } => {\n    return typeof variant === 'object' && variant !== null && 'transition' in variant\n}\n\nconst createVariantsWithTransition = (baseVariants: Variants, transition?: Transition & { exit?: Transition }): Variants => {\n    if (!transition) return baseVariants\n\n    const { ...mainTransition } = transition\n\n    return {\n        ...baseVariants,\n        visible: {\n            ...baseVariants.visible,\n            transition: {\n                ...(hasTransition(baseVariants.visible) ? baseVariants.visible.transition : {}),\n                ...mainTransition,\n            },\n        },\n        exit: {\n            ...baseVariants.exit,\n            transition: {\n                ...(hasTransition(baseVariants.exit) ? baseVariants.exit.transition : {}),\n                ...mainTransition,\n                staggerDirection: -1,\n            },\n        },\n    }\n}\n\nexport function TextEffect({ children, per = 'word', as = 'p', variants, className, preset = 'fade', delay = 0, speedReveal = 1, speedSegment = 1, trigger = true, onAnimationComplete, onAnimationStart, segmentWrapperClassName, containerTransition, segmentTransition, style }: TextEffectProps) {\n    const segments = splitText(children, per)\n    const MotionTag = motion[as as keyof typeof motion] as typeof motion.div\n\n    const baseVariants = preset ? presetVariants[preset] : { container: defaultContainerVariants, item: defaultItemVariants }\n\n    const stagger = defaultStaggerTimes[per] / speedReveal\n\n    const baseDuration = 0.3 / speedSegment\n\n    const customStagger = hasTransition(variants?.container?.visible ?? {}) ? (variants?.container?.visible as TargetAndTransition).transition?.staggerChildren : undefined\n\n    const customDelay = hasTransition(variants?.container?.visible ?? {}) ? (variants?.container?.visible as TargetAndTransition).transition?.delayChildren : undefined\n\n    const computedVariants = {\n        container: createVariantsWithTransition(variants?.container || baseVariants.container, {\n            staggerChildren: customStagger ?? stagger,\n            delayChildren: customDelay ?? delay,\n            ...containerTransition,\n            exit: {\n                staggerChildren: customStagger ?? stagger,\n                staggerDirection: -1,\n            },\n        }),\n        item: createVariantsWithTransition(variants?.item || baseVariants.item, {\n            duration: baseDuration,\n            ...segmentTransition,\n        }),\n    }\n\n    return (\n        <AnimatePresence mode=\"popLayout\">\n            {trigger && (\n                <MotionTag\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                    exit=\"exit\"\n                    variants={computedVariants.container}\n                    className={className}\n                    onAnimationComplete={onAnimationComplete}\n                    onAnimationStart={onAnimationStart}\n                    style={style}>\n                    {per !== 'line' ? <span className=\"sr-only\">{children}</span> : null}\n                    {segments.map((segment, index) => (\n                        <AnimationComponent\n                            key={`${per}-${index}-${segment}`}\n                            segment={segment}\n                            variants={computedVariants.item}\n                            per={per}\n                            segmentWrapperClassName={segmentWrapperClassName}\n                        />\n                    ))}\n                </MotionTag>\n            )}\n        </AnimatePresence>\n    )\n}\n",
      "path": "components/motion-primitives/text-effect.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport const titleToNumber = (title: string): number => {\n    const titles = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n    return titles.indexOf(title.toLowerCase()) + 1;\n};",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva('inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0', {\n    variants: {\n        variant: {\n            default: 'bg-radial-[at_52%_-52%] **:[text-shadow:0_1px_0_var(--color-primary)] border-primary from-primary/70 to-primary/95 text-primary-foreground inset-shadow-2xs inset-shadow-white/25 dark:inset-shadow-white dark:from-primary dark:to-primary/70 dark:hover:to-primary border text-sm shadow-md shadow-zinc-950/30 ring-0 transition-[filter] duration-200 hover:brightness-125 active:brightness-95 dark:border-0',\n            destructive: 'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',\n            outline: 'shadow-xs bg-linear-to-t hover:to-muted to-background from-muted dark:from-muted/50 dark:hover:to-muted/50 dark:border-border border border-zinc-300 shadow-zinc-950/10 duration-200',\n            secondary: 'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',\n            ghost: 'hover:bg-accent hover:text-accent-foreground',\n            link: 'text-primary underline-offset-4 hover:underline',\n        },\n        size: {\n            default: 'h-9 px-4 py-2',\n            sm: 'h-8 rounded-md px-3 text-xs',\n            lg: 'h-10 rounded-md px-8',\n            icon: 'h-9 w-9',\n        },\n    },\n    defaultVariants: {\n        variant: 'default',\n        size: 'default',\n    },\n})\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {\n    asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button'\n    return (\n        <Comp\n            className={cn(buttonVariants({ variant, size, className }))}\n            ref={ref}\n            {...props}\n        />\n    )\n})\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }\n",
      "path": "components/ui/button.tsx"
    }
  ]
}
